-- Database extensions for GTFS and route data integration
-- To be added to your existing database

-------------------------------------------------
-- 5. GTFS Datasets Management
-------------------------------------------------
CREATE TABLE gtfs_datasets (
    id              UUID PRIMARY KEY        DEFAULT gen_random_uuid(),
    company_id      UUID        NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    dataset_name    TEXT        NOT NULL,   -- e.g., "SBB_2024_Winter", "PostBus_Valais_2024"
    gtfs_url        TEXT,                   -- URL to download GTFS data
    osm_extract_url TEXT,                   -- URL to OSM extract for the region
    last_updated    TIMESTAMPTZ,
    status          TEXT        NOT NULL CHECK (status IN ('pending','downloading','processing','completed','failed')) DEFAULT 'pending',
    file_path       TEXT,                   -- Path to processed GTFS files
    created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (company_id, dataset_name)
);

-------------------------------------------------
-- 6. Routes/Lines from GTFS
-------------------------------------------------
CREATE TABLE transit_routes (
    id              UUID PRIMARY KEY        DEFAULT gen_random_uuid(),
    company_id      UUID        NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    gtfs_dataset_id UUID        NOT NULL REFERENCES gtfs_datasets(id) ON DELETE CASCADE,
    gtfs_route_id   TEXT        NOT NULL,   -- Original GTFS route_id
    route_short_name TEXT,                  -- e.g., "12", "S1", "IR15"
    route_long_name TEXT,                   -- Full route name
    route_type      INTEGER     NOT NULL,   -- GTFS route_type (3=bus, 1=subway, etc.)
    route_color     TEXT,                   -- Hex color for route
    agency_name     TEXT,                   -- Transport operator name
    created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (gtfs_dataset_id, gtfs_route_id)
);

-------------------------------------------------
-- 7. Route Shapes (generated by pfaedle)
-------------------------------------------------
CREATE TABLE route_shapes (
    id              UUID PRIMARY KEY        DEFAULT gen_random_uuid(),
    transit_route_id UUID       NOT NULL REFERENCES transit_routes(id) ON DELETE CASCADE,
    gtfs_shape_id   TEXT        NOT NULL,   -- GTFS shape_id
    shape_geom      GEOMETRY(LINESTRING, 4326), -- PostGIS geometry
    total_distance_m NUMERIC,               -- Total route distance in meters
    elevation_gain_m NUMERIC,               -- Total elevation gain
    avg_grade_percent NUMERIC,              -- Average grade percentage
    created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (transit_route_id, gtfs_shape_id)
);

-- Create spatial index for efficient geographic queries
CREATE INDEX idx_route_shapes_geom ON route_shapes USING GIST (shape_geom);

-------------------------------------------------
-- 8. Route Stops
-------------------------------------------------
CREATE TABLE route_stops (
    id              UUID PRIMARY KEY        DEFAULT gen_random_uuid(),
    transit_route_id UUID       NOT NULL REFERENCES transit_routes(id) ON DELETE CASCADE,
    gtfs_stop_id    TEXT        NOT NULL,   -- GTFS stop_id
    stop_name       TEXT        NOT NULL,
    stop_lat        NUMERIC     NOT NULL,
    stop_lon        NUMERIC     NOT NULL,
    stop_sequence   INTEGER     NOT NULL,   -- Order of stop in route
    distance_from_start_m NUMERIC,          -- Distance from route start
    created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (transit_route_id, gtfs_stop_id, stop_sequence)
);

-- Index for geographic queries
CREATE INDEX idx_route_stops_location ON route_stops (stop_lat, stop_lon);

-------------------------------------------------
-- 9. Update simulation_runs to link with routes
-------------------------------------------------
ALTER TABLE simulation_runs 
ADD COLUMN transit_route_id UUID REFERENCES transit_routes(id),
ADD COLUMN route_segment_start_stop UUID REFERENCES route_stops(id),
ADD COLUMN route_segment_end_stop UUID REFERENCES route_stops(id);

-- Add index for route-based simulations
CREATE INDEX idx_simulation_runs_route ON simulation_runs (transit_route_id); 