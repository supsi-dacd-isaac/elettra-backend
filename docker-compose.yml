services:
  db:
    image: postgres:16-alpine
    container_name: elettra-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-elettra}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5440:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data

  app:
    build: .
    container_name: elettra-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Point to the docker-specific config file copied into the image
      ELETTRA_CONFIG_FILE: /app/config/elettra-config.docker.yaml
      # Optionally override log level at runtime
      LOG_LEVEL: INFO
    ports:
      - "8002:8000"
    volumes:
      # Mount only if you want live-reload during local development (uncomment and set reload true)
      # - ./:/app
      - ./config/elettra-config.docker.yaml:/app/config/elettra-config.docker.yaml:ro
    # For local dev with code changes + reload you can override command:
    # command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  trip-shift-frontend:
    build:
      context: ./trip-shift-frontend
      args:
        VITE_TEST_LOGIN_EMAIL: ${VITE_TEST_LOGIN_EMAIL:-}
        VITE_TEST_LOGIN_PASSWORD: ${VITE_TEST_LOGIN_PASSWORD:-}
    ports:
      - "5173:80"
    environment:
      - VITE_API_BASE_URL=${API_BASE_URL:-http://elettra-api:8000}
      - VITE_TEST_ROUTE_ID=${TEST_ROUTE_ID:-55f151ad-63f8-40dc-85e7-330becb51c75}
      - VITE_DAY=${TEST_DAY:-monday}
      # - VITE_API_TOKEN=${TEST_API_TOKEN}
    depends_on:
      - app

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1
    restart: unless-stopped
    expose:
      - "9000"
    ports:
      - "9002:9000"
      # MinIO Console is available at http://localhost:9001
      - "9003:9001"
    environment:
      MINIO_ROOT_USER: "${AWS_ACCESS_KEY_ID:-minio_user}"
      MINIO_ROOT_PASSWORD: "${AWS_SECRET_ACCESS_KEY:-minio_password}"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data

  minio-create-bucket:
    image: minio/mc:RELEASE.2025-04-16T18-13-26Z-cpuv1
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
      if ! mc ls minio | grep --quiet bucket; then
        mc mb minio/elevation-profiles
      else
        echo 'bucket elevation-profiles already exists'
      fi
      "

volumes:
  db-data:
  minio-data:
