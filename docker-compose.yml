services:
  db:
    image: postgres:18-alpine
    container_name: elettra-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-elettra}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5440:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
      # Auto-initialize schema on first startup (only runs if db is empty)
      - ./db/elettra_schema_init.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro

  app:
    build: .
    container_name: elettra-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Point to the docker-specific config file copied into the image
      ELETTRA_CONFIG_FILE: /app/config/elettra-config.docker.yaml
      # Optionally override log level at runtime
      LOG_LEVEL: INFO
    ports:
      - "8002:8000"
    volumes:
      # Mount only if you want live-reload during local development (uncomment and set reload true)
      # - ./:/app
      - ./config/elettra-config.docker.yaml:/app/config/elettra-config.docker.yaml:ro
    # For local dev with code changes + reload you can override command:
    # command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  trip-shift-frontend:
    build:
      context: ./trip-shift-frontend
      args:
        VITE_TEST_LOGIN_EMAIL: ${VITE_TEST_LOGIN_EMAIL:-}
        VITE_TEST_LOGIN_PASSWORD: ${VITE_TEST_LOGIN_PASSWORD:-}
        VITE_AUTO_LOGIN: ${VITE_AUTO_LOGIN:-true}
    restart: unless-stopped
    ports:
      - "55557:80"
    environment:
      - VITE_API_BASE_URL=${API_BASE_URL:-http://elettra-api:8000}
      - VITE_TEST_ROUTE_ID=${TEST_ROUTE_ID:-55f151ad-63f8-40dc-85e7-330becb51c75}
      - VITE_DAY=${TEST_DAY:-monday}
      - VITE_TEST_LOGIN_EMAIL=${VITE_TEST_LOGIN_EMAIL:-}
      - VITE_TEST_LOGIN_PASSWORD=${VITE_TEST_LOGIN_PASSWORD:-}
      - VITE_AUTO_LOGIN=${VITE_AUTO_LOGIN:-true}
      # - VITE_API_TOKEN=${TEST_API_TOKEN}
    depends_on:
      - app

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1
    restart: unless-stopped
    expose:
      - "9000"
    ports:
      - "9002:9000"
      # MinIO Console is available at http://localhost:9001
      - "9003:9001"
    environment:
      MINIO_ROOT_USER: "${AWS_ACCESS_KEY_ID:-minio_user}"
      MINIO_ROOT_PASSWORD: "${AWS_SECRET_ACCESS_KEY:-minio_password}"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data

  minio-create-bucket:
    image: minio/mc:RELEASE.2025-04-16T18-13-26Z-cpuv1
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
      if ! mc ls minio | grep --quiet bucket; then
        mc mb minio/elevation-profiles
      else
        echo 'bucket elevation-profiles already exists'
      fi
      "

  osrm-download:
    image: alpine:latest
    container_name: elettra-osrm-download
    volumes:
      - osrm-data:/data
    entrypoint: >
      sh -c "
      apk add --no-cache curl &&
      if [ ! -f /data/switzerland-latest.osm.pbf ]; then
        echo 'Downloading Switzerland OSM data...'
        curl -L -o /data/switzerland-latest.osm.pbf https://download.geofabrik.de/europe/switzerland-latest.osm.pbf
        echo 'Switzerland OSM data downloaded successfully'
      else
        echo 'Switzerland OSM data already exists'
      fi
      "

  osrm-process:
    image: osrm/osrm-backend:latest
    container_name: elettra-osrm-process
    depends_on:
      osrm-download:
        condition: service_completed_successfully
    volumes:
      - osrm-data:/data
    entrypoint: >
      bash -c "
      if [ ! -f /data/switzerland-latest.osrm ]; then
        echo 'Extracting OSRM data...'
        osrm-extract -p /opt/car.lua /data/switzerland-latest.osm.pbf
        echo 'OSRM data extracted successfully'
      else
        echo 'OSRM data already extracted'
      fi &&
      if [ ! -f /data/switzerland-latest.osrm.hsgr ]; then
        echo 'Contracting OSRM data...'
        osrm-contract /data/switzerland-latest.osrm
        echo 'OSRM data contracted successfully'
      else
        echo 'OSRM data already contracted'
      fi &&
      echo 'OSRM data preparation completed'
      "

  osrm:
    image: osrm/osrm-backend:latest
    container_name: elettra-osrm
    restart: unless-stopped
    depends_on:
      osrm-process:
        condition: service_completed_successfully
    ports:
      - "5001:5000"
    volumes:
      - osrm-data:/data
    command: osrm-routed --algorithm ch /data/switzerland-latest.osrm

  # Falco Security Monitoring
  falco:
    image: falcosecurity/falco:latest
    container_name: elettra-falco
    restart: unless-stopped
    privileged: true
    pid: host
    network_mode: host
    volumes:
      # Mount host filesystem for monitoring
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /dev:/host/dev:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      # Falco configuration with native Slack support
      - ./falco/falco.yaml:/etc/falco/falco.yaml:ro
      - ./falco/rules.d:/etc/falco/rules.d:ro
      # Output directory for logs
      - falco-logs:/var/log/falco
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK}
    command: ["falco", "-c", "/etc/falco/falco.yaml"]

  # Diun - Docker Image Update Notifier
  diun:
    image: crazymax/diun:latest
    container_name: elettra-diun
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./diun/diun.yml:/etc/diun/diun.yml:ro
      - diun-data:/data
    environment:
      - DIUN_NOTIF_SLACK_WEBHOOKURL=${SLACK_WEBHOOK_URL}
      - TZ=Europe/Zurich
    command: ["serve", "--config", "/etc/diun/diun.yml"]

  # Falco Exporter for Prometheus metrics
  falco-exporter:
    image: falcosecurity/falco-exporter:latest
    container_name: elettra-falco-exporter
    restart: unless-stopped
    depends_on:
      - falco
    ports:
      - "9376:9376"
    environment:
      - FALCO_GRPC_ENDPOINT=falco:5060


volumes:
  db-data:
  minio-data:
  osrm-data:
  falco-logs:
  diun-data:
