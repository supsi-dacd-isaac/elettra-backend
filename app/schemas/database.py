# Auto-generated by generate_schemas.py
from __future__ import annotations
from typing import Optional, Any
from datetime import date, datetime, time
from decimal import Decimal
from uuid import UUID
from pydantic import BaseModel, ConfigDict

class SimulationRunsCreate(BaseModel):
    user_id: UUID
    input_params: dict | list | None
    status: str
    created_at: datetime
    variant_id: UUID
    optimal_battery_kwh: Optional[Decimal] = None
    output_results: Optional[dict | list | None] = None
    completed_at: Optional[datetime] = None

class SimulationRunsUpdate(BaseModel):
    id: Optional[UUID] = None
    user_id: Optional[UUID] = None
    input_params: Optional[dict | list | None] = None
    status: Optional[str] = None
    created_at: Optional[datetime] = None
    variant_id: Optional[UUID] = None
    optimal_battery_kwh: Optional[Decimal] = None
    output_results: Optional[dict | list | None] = None
    completed_at: Optional[datetime] = None

class SimulationRunsRead(BaseModel):
    id: UUID
    user_id: UUID
    input_params: dict | list | None
    status: str
    created_at: datetime
    variant_id: UUID
    optimal_battery_kwh: Optional[Decimal]
    output_results: Optional[dict | list | None]
    completed_at: Optional[datetime]
    model_config = ConfigDict(from_attributes=True)

class GtfsCalendarCreate(BaseModel):
    service_id: str
    monday: int
    tuesday: int
    wednesday: int
    thursday: int
    friday: int
    saturday: int
    sunday: int
    start_date: date
    end_date: date

class GtfsCalendarUpdate(BaseModel):
    id: Optional[UUID] = None
    service_id: Optional[str] = None
    monday: Optional[int] = None
    tuesday: Optional[int] = None
    wednesday: Optional[int] = None
    thursday: Optional[int] = None
    friday: Optional[int] = None
    saturday: Optional[int] = None
    sunday: Optional[int] = None
    start_date: Optional[date] = None
    end_date: Optional[date] = None

class GtfsCalendarRead(BaseModel):
    id: UUID
    service_id: str
    monday: int
    tuesday: int
    wednesday: int
    thursday: int
    friday: int
    saturday: int
    sunday: int
    start_date: date
    end_date: date
    model_config = ConfigDict(from_attributes=True)

class GtfsTripsCreate(BaseModel):
    route_id: UUID
    service_id: UUID
    gtfs_service_id: str
    trip_id: str
    status: str
    trip_headsign: Optional[str] = None
    trip_short_name: Optional[str] = None
    direction_id: Optional[int] = None
    block_id: Optional[str] = None
    shape_id: Optional[str] = None
    wheelchair_accessible: Optional[int] = None
    bikes_allowed: Optional[int] = None
    start_stop_name: Optional[str] = None
    end_stop_name: Optional[str] = None
    departure_time: Optional[str] = None
    arrival_time: Optional[str] = None

class GtfsTripsUpdate(BaseModel):
    id: Optional[UUID] = None
    route_id: Optional[UUID] = None
    service_id: Optional[UUID] = None
    gtfs_service_id: Optional[str] = None
    trip_id: Optional[str] = None
    status: Optional[str] = None
    trip_headsign: Optional[str] = None
    trip_short_name: Optional[str] = None
    direction_id: Optional[int] = None
    block_id: Optional[str] = None
    shape_id: Optional[str] = None
    wheelchair_accessible: Optional[int] = None
    bikes_allowed: Optional[int] = None
    start_stop_name: Optional[str] = None
    end_stop_name: Optional[str] = None
    departure_time: Optional[str] = None
    arrival_time: Optional[str] = None

class GtfsTripsRead(BaseModel):
    id: UUID
    route_id: UUID
    service_id: UUID
    gtfs_service_id: str
    trip_id: str
    status: str
    trip_headsign: Optional[str]
    trip_short_name: Optional[str]
    direction_id: Optional[int]
    block_id: Optional[str]
    shape_id: Optional[str]
    wheelchair_accessible: Optional[int]
    bikes_allowed: Optional[int]
    start_stop_name: Optional[str]
    end_stop_name: Optional[str]
    departure_time: Optional[str]
    arrival_time: Optional[str]
    model_config = ConfigDict(from_attributes=True)

class DepotsCreate(BaseModel):
    user_id: UUID
    name: str
    address: Optional[str] = None
    features: Optional[dict | list | None] = None
    stop_id: Optional[UUID] = None

class DepotsUpdate(BaseModel):
    id: Optional[UUID] = None
    user_id: Optional[UUID] = None
    name: Optional[str] = None
    address: Optional[str] = None
    features: Optional[dict | list | None] = None
    stop_id: Optional[UUID] = None

class DepotsRead(BaseModel):
    id: UUID
    user_id: UUID
    name: str
    address: Optional[str]
    features: Optional[dict | list | None]
    stop_id: Optional[UUID]
    model_config = ConfigDict(from_attributes=True)

class GtfsAgenciesCreate(BaseModel):
    gtfs_agency_id: str
    agency_name: str
    agency_url: str
    agency_timezone: str
    agency_lang: Optional[str] = None
    agency_phone: Optional[str] = None
    agency_fare_url: Optional[str] = None
    agency_email: Optional[str] = None

class GtfsAgenciesUpdate(BaseModel):
    id: Optional[UUID] = None
    gtfs_agency_id: Optional[str] = None
    agency_name: Optional[str] = None
    agency_url: Optional[str] = None
    agency_timezone: Optional[str] = None
    agency_lang: Optional[str] = None
    agency_phone: Optional[str] = None
    agency_fare_url: Optional[str] = None
    agency_email: Optional[str] = None

class GtfsAgenciesRead(BaseModel):
    id: UUID
    gtfs_agency_id: str
    agency_name: str
    agency_url: str
    agency_timezone: str
    agency_lang: Optional[str]
    agency_phone: Optional[str]
    agency_fare_url: Optional[str]
    agency_email: Optional[str]
    model_config = ConfigDict(from_attributes=True)

class UsersCreate(BaseModel):
    company_id: UUID
    email: str
    full_name: str
    password_hash: str
    role: str
    created_at: datetime

class UsersUpdate(BaseModel):
    id: Optional[UUID] = None
    company_id: Optional[UUID] = None
    email: Optional[str] = None
    full_name: Optional[str] = None
    password_hash: Optional[str] = None
    role: Optional[str] = None
    created_at: Optional[datetime] = None

class UsersRead(BaseModel):
    id: UUID
    company_id: UUID
    email: str
    full_name: str
    password_hash: str
    role: str
    created_at: datetime
    model_config = ConfigDict(from_attributes=True)

class GtfsStopsTimesCreate(BaseModel):
    trip_id: UUID
    stop_id: UUID
    arrival_time: Optional[str] = None
    departure_time: Optional[str] = None
    stop_sequence: Optional[int] = None
    stop_headsign: Optional[str] = None
    pickup_type: Optional[int] = None
    drop_off_type: Optional[int] = None
    shape_dist_traveled: Optional[float] = None
    timepoint: Optional[int] = None
    continuous_pickup: Optional[int] = None
    continuous_drop_off: Optional[int] = None

class GtfsStopsTimesUpdate(BaseModel):
    id: Optional[UUID] = None
    trip_id: Optional[UUID] = None
    stop_id: Optional[UUID] = None
    arrival_time: Optional[str] = None
    departure_time: Optional[str] = None
    stop_sequence: Optional[int] = None
    stop_headsign: Optional[str] = None
    pickup_type: Optional[int] = None
    drop_off_type: Optional[int] = None
    shape_dist_traveled: Optional[float] = None
    timepoint: Optional[int] = None
    continuous_pickup: Optional[int] = None
    continuous_drop_off: Optional[int] = None

class GtfsStopsTimesRead(BaseModel):
    id: UUID
    trip_id: UUID
    stop_id: UUID
    arrival_time: Optional[str]
    departure_time: Optional[str]
    stop_sequence: Optional[int]
    stop_headsign: Optional[str]
    pickup_type: Optional[int]
    drop_off_type: Optional[int]
    shape_dist_traveled: Optional[float]
    timepoint: Optional[int]
    continuous_pickup: Optional[int]
    continuous_drop_off: Optional[int]
    model_config = ConfigDict(from_attributes=True)

class VariantsCreate(BaseModel):
    route_id: UUID
    variant_num: int
    created_at: datetime
    shape_id: str

class VariantsUpdate(BaseModel):
    id: Optional[UUID] = None
    route_id: Optional[UUID] = None
    variant_num: Optional[int] = None
    created_at: Optional[datetime] = None
    shape_id: Optional[str] = None

class VariantsRead(BaseModel):
    id: UUID
    route_id: UUID
    variant_num: int
    created_at: datetime
    shape_id: str
    model_config = ConfigDict(from_attributes=True)

class BusesCreate(BaseModel):
    user_id: UUID
    name: str
    specs: dict | list | None
    bus_model_id: Optional[UUID] = None

class BusesUpdate(BaseModel):
    id: Optional[UUID] = None
    user_id: Optional[UUID] = None
    name: Optional[str] = None
    specs: Optional[dict | list | None] = None
    bus_model_id: Optional[UUID] = None

class BusesRead(BaseModel):
    id: UUID
    user_id: UUID
    name: str
    specs: dict | list | None
    bus_model_id: Optional[UUID]
    model_config = ConfigDict(from_attributes=True)

class ShiftsStructuresCreate(BaseModel):
    trip_id: UUID
    shift_id: UUID
    sequence_number: int

class ShiftsStructuresUpdate(BaseModel):
    id: Optional[UUID] = None
    trip_id: Optional[UUID] = None
    shift_id: Optional[UUID] = None
    sequence_number: Optional[int] = None

class ShiftsStructuresRead(BaseModel):
    id: UUID
    trip_id: UUID
    shift_id: UUID
    sequence_number: int
    model_config = ConfigDict(from_attributes=True)

class GtfsStopsCreate(BaseModel):
    stop_id: str
    stop_code: Optional[str] = None
    stop_name: Optional[str] = None
    stop_desc: Optional[str] = None
    stop_lat: Optional[float] = None
    stop_lon: Optional[float] = None
    zone_id: Optional[str] = None
    stop_url: Optional[str] = None
    location_type: Optional[int] = None
    parent_station: Optional[str] = None
    stop_timezone: Optional[str] = None
    wheelchair_boarding: Optional[int] = None
    platform_code: Optional[str] = None
    level_id: Optional[str] = None

class GtfsStopsUpdate(BaseModel):
    id: Optional[UUID] = None
    stop_id: Optional[str] = None
    stop_code: Optional[str] = None
    stop_name: Optional[str] = None
    stop_desc: Optional[str] = None
    stop_lat: Optional[float] = None
    stop_lon: Optional[float] = None
    zone_id: Optional[str] = None
    stop_url: Optional[str] = None
    location_type: Optional[int] = None
    parent_station: Optional[str] = None
    stop_timezone: Optional[str] = None
    wheelchair_boarding: Optional[int] = None
    platform_code: Optional[str] = None
    level_id: Optional[str] = None

class GtfsStopsRead(BaseModel):
    id: UUID
    stop_id: str
    stop_code: Optional[str]
    stop_name: Optional[str]
    stop_desc: Optional[str]
    stop_lat: Optional[float]
    stop_lon: Optional[float]
    zone_id: Optional[str]
    stop_url: Optional[str]
    location_type: Optional[int]
    parent_station: Optional[str]
    stop_timezone: Optional[str]
    wheelchair_boarding: Optional[int]
    platform_code: Optional[str]
    level_id: Optional[str]
    model_config = ConfigDict(from_attributes=True)

class WeatherMeasurementsCreate(BaseModel):
    time_utc: datetime
    latitude: Decimal
    longitude: Decimal
    temp_air: Optional[float] = None
    relative_humidity: Optional[float] = None
    ghi: Optional[float] = None
    dni: Optional[float] = None
    dhi: Optional[float] = None
    ir_h: Optional[float] = None
    wind_speed: Optional[float] = None
    wind_direction: Optional[float] = None
    pressure: Optional[int] = None

class WeatherMeasurementsUpdate(BaseModel):
    id: Optional[UUID] = None
    time_utc: Optional[datetime] = None
    latitude: Optional[Decimal] = None
    longitude: Optional[Decimal] = None
    temp_air: Optional[float] = None
    relative_humidity: Optional[float] = None
    ghi: Optional[float] = None
    dni: Optional[float] = None
    dhi: Optional[float] = None
    ir_h: Optional[float] = None
    wind_speed: Optional[float] = None
    wind_direction: Optional[float] = None
    pressure: Optional[int] = None

class WeatherMeasurementsRead(BaseModel):
    id: UUID
    time_utc: datetime
    latitude: Decimal
    longitude: Decimal
    temp_air: Optional[float]
    relative_humidity: Optional[float]
    ghi: Optional[float]
    dni: Optional[float]
    dhi: Optional[float]
    ir_h: Optional[float]
    wind_speed: Optional[float]
    wind_direction: Optional[float]
    pressure: Optional[int]
    model_config = ConfigDict(from_attributes=True)

class BusesModelsCreate(BaseModel):
    name: str
    specs: dict | list | None
    user_id: UUID
    manufacturer: Optional[str] = None
    description: Optional[str] = None

class BusesModelsUpdate(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    specs: Optional[dict | list | None] = None
    user_id: Optional[UUID] = None
    manufacturer: Optional[str] = None
    description: Optional[str] = None

class BusesModelsRead(BaseModel):
    id: UUID
    name: str
    specs: dict | list | None
    user_id: UUID
    manufacturer: Optional[str]
    description: Optional[str]
    model_config = ConfigDict(from_attributes=True)

class ShiftsCreate(BaseModel):
    name: str
    bus_id: Optional[UUID] = None

class ShiftsUpdate(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    bus_id: Optional[UUID] = None

class ShiftsRead(BaseModel):
    id: UUID
    name: str
    bus_id: Optional[UUID]
    model_config = ConfigDict(from_attributes=True)

class GtfsRoutesCreate(BaseModel):
    route_id: str
    agency_id: UUID
    route_short_name: Optional[str] = None
    route_long_name: Optional[str] = None
    route_desc: Optional[str] = None
    route_type: Optional[int] = None
    route_url: Optional[str] = None
    route_color: Optional[str] = None
    route_text_color: Optional[str] = None
    route_sort_order: Optional[int] = None
    continuous_pickup: Optional[int] = None
    continuous_drop_off: Optional[int] = None

class GtfsRoutesUpdate(BaseModel):
    id: Optional[UUID] = None
    route_id: Optional[str] = None
    agency_id: Optional[UUID] = None
    route_short_name: Optional[str] = None
    route_long_name: Optional[str] = None
    route_desc: Optional[str] = None
    route_type: Optional[int] = None
    route_url: Optional[str] = None
    route_color: Optional[str] = None
    route_text_color: Optional[str] = None
    route_sort_order: Optional[int] = None
    continuous_pickup: Optional[int] = None
    continuous_drop_off: Optional[int] = None

class GtfsRoutesRead(BaseModel):
    id: UUID
    route_id: str
    agency_id: UUID
    route_short_name: Optional[str]
    route_long_name: Optional[str]
    route_desc: Optional[str]
    route_type: Optional[int]
    route_url: Optional[str]
    route_color: Optional[str]
    route_text_color: Optional[str]
    route_sort_order: Optional[int]
    continuous_pickup: Optional[int]
    continuous_drop_off: Optional[int]
    model_config = ConfigDict(from_attributes=True)
